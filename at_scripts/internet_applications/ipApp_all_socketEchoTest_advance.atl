/******************************************************************************
*  Copyright (c) 2020 u-blox AG, Thalwil, Switzerland.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************
* Synopsis:     ipApp_all_socketEchoTest_advance.atl
* Topic:        internet_application
* Version:      2.0
* Author:       dtro
* Description:
*       This script has the purpose to demonstrate a TCP/UDP socket connection
*       with an ECHO server test.
*       The module must be connected to internet and the internal context
*       must be activated.
******************************************************************************
* Modules:      All products
* Tested on:    LARA-R2, SARA-R42, LENA-R8, LEXI-R10, LARA-R6, SARA-R5
******************************************************************************/

// Configurable parameters
string protocol = "TCP";                // protocol can be TCP or UDP
string server_ip = "185.215.195.137";
int server_port = 7;
string echo_text = "Hello world!";
int length_greeting_server = 28;
int waiting_time_at = 5000;
int waiting_timeout = 180000;
bool hex_mode_enabled = false;          // HEX mode controlled with +UDCONF=1,x
bool binary_mode_enabled = false;       // use or not "binary mode" on +USOWR
string command;


ECHO("*************************************************************************************************************");
ECHO("This script needs an internet connection and an activated internal context.");
ECHO("*************************************************************************************************************");
ECHO("");
ECHO("");
ECHO("*************************************************************************************************************");
ECHO("TESTING THE REACHABILITY OF THE ECHO SERVER");
ECHO("*************************************************************************************************************");

command = "AT+UPING=\"" + server_ip + "\"";
SendAtCommand(command, 200, "OK");

string check_ping = WAIT("+UUPINGER", waiting_time_at);
string check_rtt = WAIT("+UUPING", waiting_time_at);

if(check_ping.findFirst("+UUPINGER") == -1 && check_rtt.findFirst("-1") == -1) {
    
    ECHO("*************************************************************************************************************");
    ECHO("ECHO SERVER REACHED");
    ECHO("*************************************************************************************************************");

    string echo_text_hex;
    // Configuration hex_mode
    if (hex_mode_enabled) {
        AT+UDCONF=1,1
        AT+UDCONF=1
        echo_text_hex = STRING2HEX(echo_text);
    } else {
        AT+UDCONF=1,0
        AT+UDCONF=1
    }
    
    string resp, socket_id;
    if (protocol == "TCP") {
        resp = SENDAT('AT+USOCR=6', 200, '+USOCR');
        socket_id = resp.split(':')[1];
    }
    if (protocol == "UDP") {
        resp = SENDAT('AT+USOCR=17', 200, '+USOCR');
        socket_id = resp.split(':')[1];
    }
    
    // +USOCO and greeting message only with TCP
    if (protocol == "TCP") {
        command = "AT+USOCO=" + socket_id + ",\"" + server_ip + "\"," + server_port;
        SendAtCommand(command, waiting_timeout, "OK");

        PAUSE(waiting_time_at);

        command = "AT+USORD=" + socket_id + "," + length_greeting_server;
        SendAtCommand(command, waiting_timeout, "OK");
    }
    
    string returned_echo;
    if (binary_mode_enabled){
        if (protocol == "TCP") {
            command = "AT+USOWR=" + socket_id + "," + echo_text.length();
            SendAtCommand(command, waiting_time_at, "@");
            SendAtCommand(echo_text, waiting_time_at, "OK");
            WAIT("+UUSORD", waiting_timeout);
        }
        if (protocol == "UDP") {
            command = "AT+USOST=" + socket_id + ",\"" + server_ip + "\"," + server_port + "," + echo_text.length();
            SendAtCommand(command, waiting_time_at, "@");
            SendAtCommand(echo_text, waiting_time_at, "OK");
            WAIT("+UUSORF", waiting_timeout);
        }

        command = "AT+USORD=" + socket_id + "," + echo_text.length();
        returned_echo = SENDAT(command, waiting_time_at, "OK");
        ECHO(returned_echo);
    }
    else{ // if the "binary mode" is not used, we need to differentiate the two HEX mode cases
        if (hex_mode_enabled) {
            if (protocol == "TCP") {
                command = "AT+USOWR=" + socket_id + "," + echo_text_hex.length()/2 + ",\"" + echo_text_hex + "\"";
                SendAtCommand(command, waiting_timeout, "OK");
                WAIT("+UUSORD", waiting_timeout);
            }
            if (protocol == "UDP") {
                command = "AT+USOST=" + socket_id + ",\"" + server_ip + "\"," + server_port + "," + echo_text_hex.length()/2 + ",\"" + echo_text_hex + "\"";
                SendAtCommand(command, waiting_timeout, "OK");
                WAIT("+UUSORF", waiting_timeout);
            }

            command = "AT+USORD=" + socket_id + "," + echo_text_hex.length()/2;
            returned_echo = HEX2STRING(SENDAT(command, waiting_time_at, "OK"));
        } else {
            if (protocol == "TCP") {
                command = "AT+USOWR=" + socket_id + "," + echo_text.length() + ",\"" + echo_text + "\"";
                SendAtCommand(command, waiting_timeout, "OK");
                WAIT("+UUSORD", waiting_timeout);
            }
            if (protocol == "UDP") {
                command = "AT+USOST=" + socket_id + ",\"" + server_ip + "\"," + server_port + "," + echo_text.length() + ",\"" + echo_text + "\"";
                SendAtCommand(command, waiting_timeout, "OK");
                WAIT("+UUSORF", waiting_timeout);
            }

            command = "AT+USORD=" + socket_id + "," + echo_text.length();
            returned_echo = SENDAT(command, waiting_time_at, "OK");
            ECHO(returned_echo);
        }
    }

    // Closing the socket
    SendAtCommand("AT+USOCL=" + socket_id, waiting_timeout, "OK");
    
    if(returned_echo.findFirst(echo_text) != -1) {
        ECHO("*************************************************************************************************************");
        ECHO("TEST PASSED!");
        ECHO("*************************************************************************************************************");
    } else {
        ECHO("*************************************************************************************************************");
        ECHO("TEST NOT PASSED!");
        ECHO("*************************************************************************************************************");
    }
} else {
    ECHO("*************************************************************************************************************");
    ECHO("THE ECHO SERVER CANNOT BE REACHED!");
    ECHO("*************************************************************************************************************");
}
