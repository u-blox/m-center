/*******************************************************************************
*  Copyright (c) 2020 u-blox AG, Thalwil, Switzerland.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************
* Synopsis:     ipApp_lenaR8_saraR422_ratComparison_advanced.atl
* Topic:        internet_application
* Version:      2.0
* Author:       dtro, mreb
* Description:
*       This script tests upload time for a 2kB file and signal quality in
*       a given position. While in a loop it composes a string out of
*       selected RAT, network MNO, success or failure of the upload, module
*       name, location and neighbor cells. It outputs data as: $SQLFD_<RAT>_
*       <NETWORK_MNO>_<SUCCESS/FAILURE>_<TIME>_<MODULE>_<GNSS_FIX>_<CESQ>_
*       <NEIGHBOR_CELLS>.
******************************************************************************
* Modules:      SARA-R422M10S, LENA-R8001M10
* Tested on:    SARA-R422M10S, LENA-R8001M10
******************************************************************************/

//****************************************************************************/
//--------- CONFIGURABLE PARAMETERS NEEDED FOR THE DRIVE TEST ----------------/
//****************************************************************************/

// modem type with case
// 1 - M1 for SARA-R422M10S
// 2 - 2G for SARA-R422M10S
// 3 - 1BIS for LENA-R8001M10
int modem_type = 3;

// Server IP to perform HTTPS POST
string ip_server = "<server_IP_address>";

// CA certificate in plain text
string certificate = "<root_CA_certificate>";

// APN for initial default bearer
string apn_initial_def_bearer = "";
//****************************************************************************/

datetime valDateTime;
string command, resp, module;

// used object for file
file f;

// GNSS iteration cycles
int iteration_number = 20000;
int aiding_type = 0;
int gnss_system = 67;
int standard_waiting_time = 2000;

// max number of retry for registration
int max_number_retry_registration = 500;

// RAT to set
string urat_set_M1_R422 = "7";
string urat_set_2G_R422 = "9";
string urat_set_1BIS_R8 = "3";

// timer for updating GNSS
int time_update_gnss = 2000;

// pause in finding a fix
int pause_find_fix = 1000;

// size file in kByte
int size_file_2_send = 2;
string file_2_send = "file_2_send.txt";

string gnss_command ="AT+UGPS=1," + aiding_type + "," + gnss_system;
string cell_info_command_R8 = "AT+GTCCINFO?";
string cell_info_command_r422 = "AT+UCGED?";
string certificate_name = "c_e_1.pem";

string output_file = "log_rat_comparison_" + valDateTime.get_hour() +"mtype" + modem_type + ".txt";

void reboot_module()
{
    SENDAT("AT+CFUN=16", 90*standard_waiting_time, "OK");
    PAUSE(200);
    bool module_is_off = true;
    while (module_is_off)
    {
        resp = SENDAT("AT", 200, "OK");
        if (FIND(resp, "OK") != -1) {
            module_is_off = false;
        }
    }
}


void enable_IP_stack_data_handling()
{
    // Enabling Internal IP stack data handling configuration (see +UDCONF=18 AT commands manual)
    SENDAT("AT+UDCONF=18,2", standard_waiting_time, "OK");

    // Reboot the module to make the change effective
    reboot_module();
}


void modem_initialization(void)
{
    // in case of R8 autobauding. If baudrate is enabled, "AT" will not be replied
    SENDAT("AT", 200, "OK");
    PAUSE(1000);
    
    module = SENDAT("ATI0", standard_waiting_time, "OK");
    SENDAT("ATI9", standard_waiting_time, "OK");

    if (modem_type == 1 || modem_type == 2){ // SARA-R422
        enable_IP_stack_data_handling();
        SENDAT("AT+UCGED=2", standard_waiting_time, "OK");
        if (FIND(module, "SARA") != -1) {
            module = module.split("\r\nOK")[0];
        } else {
            ECHO("*************************************************************************************************************");
            ECHO("Error in modem initialization");
            STOP("*************************************************************************************************************");
        }
        if (modem_type == 1)
        {
            handle_rat(urat_set_M1_R422);
        } else {
            handle_rat(urat_set_2G_R422);
        }
    } else if (modem_type == 3){ // LENA-R8
        if (FIND(module, "LENA") != -1) {
            module = module.split("\r\nOK")[0];
        } else {
            ECHO("*************************************************************************************************************");
            ECHO("Error in modem initialization");
            STOP("*************************************************************************************************************");
        }
        handle_rat(urat_set_1BIS_R8);   
    } else {
        ECHO("*************************************************************************************************************");
        ECHO("Invalid modem type. Stopping.");
        STOP("*************************************************************************************************************");
    }

    SENDAT("ATE0", 2*standard_waiting_time, "OK");
    SENDAT("AT+COPS=0,0", 150*standard_waiting_time, "OK");
    command = "AT+CEREG=3;+CREG=2;+CGREG=2;+CSCON=1;+CGEREP=2,1;+CMEE=2";
    SENDAT(command, 2*standard_waiting_time, "OK");
    SENDAT("AT+CFUN=0", 90*standard_waiting_time, "OK");
    PAUSE(1000);
    if (modem_type == 3){
        SENDAT("AT+CFGDFTPDN=0", standard_waiting_time, "OK");
        PAUSE(1000);
    }
    command = "AT+CGDCONT=1,\"IP\",\"" + apn_initial_def_bearer + "\"";
    SENDAT(command, standard_waiting_time, "OK");
    SENDAT("AT+CFUN=1", 90*standard_waiting_time, "OK");
}


void wait_for_registration_polling(void)
{
    ECHO("Check module registration");

    int counter_cycle = 0;
    bool registered = false;

    while (!registered) {

        resp = SENDAT("AT+COPS?", standard_waiting_time, "OK");

        if (FIND(resp, "+COPS: 0,0,") != -1) {
            registered = true;
            break;
        }

        if (counter_cycle < max_number_retry_registration) {
            counter_cycle++;
        } else {
            ECHO("*************************************************************************************************************");
            ECHO("Registration status to be checked, stopping the script...");
            STOP("*************************************************************************************************************");
        }

        PAUSE(2*standard_waiting_time);
    }
    init_context();
}


void init_context() 
{
    SENDAT("AT+CGACT=1,1", 100*standard_waiting_time, "OK");
    PAUSE(2000);

    if ((modem_type == 1) || (modem_type == 2)) // SARA-R422
    {
        SENDAT("AT+UPSD=0,0,0", 3*standard_waiting_time, "OK");
        SENDAT("AT+UPSD=0,100,1", 3*standard_waiting_time, "OK");
    }
}


void handle_rat(string rat_id) 
{
    SENDAT("AT+CFUN=0", 90*standard_waiting_time, "OK");
    PAUSE(1000);
    command = "AT+URAT=" + rat_id;
    SENDAT(command, 10*standard_waiting_time, "OK");
    SENDAT("AT+CFUN=1", 90*standard_waiting_time, "OK");

    ECHO("*************************************************************************************************************");
    ECHO("RAT SETTING:" + rat_id);
    ECHO("*************************************************************************************************************");
}


string return_latitude_longitude_from_nmea() 
{
    string nmea = get_a_fix();

    try {
        string timestamp = nmea.split(',')[2];
        double nmea_a = parseFloat(nmea.split(',')[4]);
        double nmea_n = parseFloat(nmea.split(',')[6]);

        int first_term_N = nmea_a / 100;
        double second_term_N = ((nmea_a/100 - first_term_N) * 10 )/ 6;
        double coord_N = first_term_N + second_term_N;

        int first_term_E = nmea_n / 100;
        double second_term_E = ((nmea_n/100 - first_term_E) * 10 )/ 6;
        double coord_E = first_term_E + second_term_E;

        if (timestamp == "0" || timestamp == ""){
            timestamp = "N.A.";
        }
        if (coord_N == 0 ){
            return (timestamp + "_N.A.,N.A."); 
        }

        return (timestamp + "_" + coord_N + ":" + nmea.split(',')[5] + "," + coord_E + ":" + nmea.split(',')[7]); 
    } catch {
        ECHO("*************************************************************************************************************");
        ECHO("BROKEN NMEA UGRMC response.");
        ECHO("*************************************************************************************************************");
        script_initialization();
        return "BROKEN NMEA UGRMC";
    }
}


void script_initialization()
{
    modem_initialization();
    wait_for_registration_polling();
    start_gnss();
    obtain_first_fix();
    configure_secure_http();
}


void write_to_file(string str_to_write)
{
    if( f.open(output_file, "a") >= 0 ) 
    {
        f.writeString(str_to_write + "\n");
        f.close();
    } else {
        ECHO("*************************************************************************************************************");
        ECHO("UNABLE TO OPEN FILE!");
        STOP("*************************************************************************************************************");
    }
}


string get_neighbor_cells()
{
    string all_cells = "";
    string service_cell, return_cells;
    int number_neighbor_cell;

    array<string> cells;

    if ((modem_type == 1) || (modem_type == 2))
    {
        resp = SENDAT(cell_info_command_r422, 10*standard_waiting_time, "OK");
        all_cells = all_cells + resp.split("\r\nOK")[0];
        if ((FIND(all_cells, "+UCGED: 2")!=-1))
        {
            try
            {
                number_neighbor_cell = (resp.split(":")).length() - 1;
                ECHO("Number of neighbor cells: " + number_neighbor_cell);
                service_cell = all_cells.split("+UCGED: 2")[1].split("\r\n")[1] + "," + all_cells.split("+UCGED: 2")[1].split("\r\n")[2];
                cells.insertLast(all_cells.split(all_cells.split("+UCGED: 2")[1].split("\r\n")[2])[1].split("\r\n")[1].split(": ")[1].split("\r\n")[0]);
                for (int i = 1; i < number_neighbor_cell - 1; i++) {
                    cells.insertLast(all_cells.split(cells[i - 1])[1].split("\r\n")[1].split(": ")[1].split("\r\n")[0]);
                }
            }
            catch
            {
                ECHO("*************************************************************************************************************");
                ECHO("Jumped one neighbor cell scan iteration.");
                ECHO("*************************************************************************************************************");
            }
        }
    }
    else if (modem_type == 3)
    {
        for (int i = 0; i < 2; i++)
        {
            resp = SENDAT(cell_info_command_R8, 10*standard_waiting_time, "OK");
            // We consider only the second iteration
            all_cells = resp.split("\r\nOK")[0];
            PAUSE(1000);
        }

        if ((FIND(all_cells, "service cell:")!=-1) && (FIND(all_cells, "neighbor cell:")!=-1))
        {
            try
            {
                number_neighbor_cell = (resp.split(" neighbor ")).length();
                ECHO("Number of neighbor cells: " + number_neighbor_cell);
                service_cell = all_cells.split("service cell:")[1].split("\r\n")[0];
                cells.insertLast(all_cells.split(service_cell)[1].split("neighbor cell:")[1].split("+GTCCINFO")[0].split("\r\n")[0]);
                for (int i = 1; i < number_neighbor_cell - 1; i++) {
                    cells.insertLast(all_cells.split(cells[i - 1])[1].split("neighbor cell:")[1].split("+GTCCINFO")[0].split("\r\n")[0]);
                }
            }
            catch
            {
                ECHO("*************************************************************************************************************");
                ECHO("Jumped one neighbor cell scan iteration.");
                ECHO("*************************************************************************************************************");
            }
        }
    } 
    else
    {
        ECHO("*************************************************************************************************************");
        ECHO("Invalid modem type. Stopping.");
        STOP("*************************************************************************************************************");
    }

    // We are returning the number_neighbor_cell, service_cell details and other neighbor cells details if present.
    return_cells = number_neighbor_cell + "_[[" + service_cell + "]";
    for (int i = 0; i < cells.length(); i++){
        return_cells = return_cells + "[" + cells[i] + "]";
    }
    return_cells = return_cells + "]";

    if (FIND(return_cells, "1_[[]]") != -1){
        return_cells = "0_[[]]";
    }

    return return_cells;
}


string get_cesq()
{
    string cesq;

    resp = SENDAT("AT+CESQ", 3*standard_waiting_time, "OK");

    if (FIND(resp, "+CESQ: ") != -1) {
        cesq = (resp.split("\r\nOK")[0]).split("+CESQ: ")[1];
    } else {
        cesq = "N.A.";
    }
    return cesq;
}


string get_mno()
{
    string mno;

    resp = SENDAT("AT+COPS?", 3*standard_waiting_time, "OK");
    try{
        if (FIND(resp, "\r\nOK") != -1) {
            resp = resp.split("\r\nOK")[0];
            return resp.split(",")[2];
        }
    } catch {}
    return "N.A.";
}


string return_RAT_and_mno()
{
    string mno = get_mno();

    if(modem_type == 1) {
        return "CAT-M1_" + mno;
    } else if (modem_type == 2) {
        return "2G_" + mno;
    } else if (modem_type == 3){
        return "CAT-1Bis_" + mno;
    } else {
        ECHO("*************************************************************************************************************");
        ECHO("Invalid modem type. Stopping.");
        STOP("*************************************************************************************************************");
        return "N.A.";
    }
}


int get_s_time()
{
    datetime valDateTime;
    int val_time_hours = valDateTime.get_hour();
    int val_time_minutes = valDateTime.get_minute();
    int val_time_seconds = valDateTime.get_second();

    return (val_time_hours * 3600) + (val_time_minutes * 60) + val_time_seconds;
}


string get_upload_time()
{
    int final_time, initial_time, time_spent;
    string status, urc_to_wait;

    init_context();
    command = "AT+UHTTPC=0,4,\"/api/test/post_file\",\"responseFilename\",\""+ file_2_send +"\",3";
    SENDAT(command, standard_waiting_time, "OK");
    initial_time = get_s_time();

    urc_to_wait = "+UUHTTPCR: 0,4,";
    resp = WAIT(urc_to_wait, 150*standard_waiting_time);
    final_time = get_s_time();
    if (FIND(resp, "+UUHTTPCR: 0,4,") != -1) 
    {
        status = resp.split("+UUHTTPCR: 0,4,")[1];
    } else {
        status = "0";
    }

    time_spent = final_time - initial_time;
    return time_spent + "_" + status;
}


void delete_file(string file_name)
{
    resp = SENDAT("AT+ULSTFILE=0", 2*standard_waiting_time, "OK");

    if (FIND(resp, file_name) != -1) {
        command = "AT+UDELFILE=\"" + file_name + "\"";
        SENDAT(command, 2*standard_waiting_time, "OK");
    }
}


void write_file(string file_name, string file_content)
{
    command = "AT+UDWNFILE=\"" + file_name + "\"" + "," + file_content.length();
    SENDAT(command, standard_waiting_time, ">");
    resp = SENDTEXT(file_content); 
    if (FIND(resp,"ERROR") != -1){
        ECHO("*************************************************************************************************************");
        ECHO("ERROR in writing a file.");
        STOP("*************************************************************************************************************");
    }
    PAUSE(2000);
}


void handle_file_to_send() 
{
    string full_text = "";
    for (int i = 0; i < (size_file_2_send * 1024); i++) {
        full_text = full_text + "A";
    }

    delete_file(file_2_send);
    write_file(file_2_send, full_text);
}


bool we_have_coverage(string entire_cesq){
    if (entire_cesq == "N.A."){
        return false;
    } else {
        if (modem_type == 2) {  //2G
            if((entire_cesq.split(",")[0] == "99" && entire_cesq.split(",")[1] == "99") || (entire_cesq.split(",")[0] == "0" && entire_cesq.split(",")[1] == "0")){
                return false;
            }
        } else {                //LTE
            if((entire_cesq.split(",")[4] == "255" && entire_cesq.split(",")[5] == "255") || (entire_cesq.split(",")[4] == "0" && entire_cesq.split(",")[5] == "0")){
                return false;
            }
        }
        return true;
    }
}


void configure_secure_http()
{
    delete_file(certificate_name);
    write_file(certificate_name, certificate);

    command = "AT+USECMNG=1,0,\"" + certificate_name + "\",\"" + certificate_name + "\"";
    SENDAT(command, standard_waiting_time, "OK");
    SENDAT("AT+USECPRF=0", standard_waiting_time, "OK");
    command = "AT+USECPRF=0,3,\"" + certificate_name + "\"";
    SENDAT(command, standard_waiting_time, "OK");
    SENDAT("AT+UHTTP=0", standard_waiting_time, "OK");
    command = "AT+UHTTP=0,0,\"" + ip_server + "\"";
    SENDAT(command, standard_waiting_time, "OK");
    SENDAT("AT+UHTTP=0,5,443", standard_waiting_time, "OK");
    SENDAT("AT+UHTTP=0,6,1,0", standard_waiting_time, "OK");
}


string http_post()
{
    string final_status;
    string upload_time_and_status = get_upload_time();
    string upload_time = upload_time_and_status.split("_")[0];
    string status = upload_time_and_status.split("_")[1];

    command = "AT+URDBLOCK=\"responseFilename\",0,50";
    resp = SENDAT(command, 2*standard_waiting_time, "OK");

    if (FIND(resp, "+URDBLOCK: \"responseFilename\",50,\"HTTP/1.1 ") != -1){

        if (status == "1" && resp.split("+URDBLOCK:")[1].split(",")[2].split(" ")[1] == "200") {
            final_status = "SUCCESS";
        } else {
            final_status = "FAILURE";
        }
    } else {
        final_status = "FAILURE";
    }
    delete_file("responseFilename");
    return final_status + "_" + upload_time;
}


void get_info()
{
    for (int i = 0; i < iteration_number; i++) {
        string all_local_cells = get_neighbor_cells();
        string final_result, pos, cesq;

        pos = return_latitude_longitude_from_nmea();
        cesq = get_cesq();

        if (we_have_coverage(cesq)){
            final_result = http_post();
        } else {
            final_result = "N.A._N.A.";
        }

        string info =  "$SQLFD" + "_" + return_RAT_and_mno() + "_" + final_result + "_" + module + "_" + pos + "_" + cesq + "_" + all_local_cells;

        ECHO(info);
        write_to_file(info);

        PAUSE(time_update_gnss);
    }
}


string get_a_fix()
{
    resp = SENDAT("AT+UGRMC?", 15*standard_waiting_time, "OK");
    if (FIND(resp, "+UGRMC:") != -1){
        return resp.split("+UGRMC:")[1];
    } else {
        return "N.A.";
    } 
}


void start_gnss()
{
    SENDAT("AT+UGIND=1", standard_waiting_time, "OK");
    SENDAT("AT+UGRMC=1", standard_waiting_time, "OK");
    SENDAT("AT+ULOCIND=1", standard_waiting_time, "OK");

    ECHO("*************************************************************************************************************");
    ECHO("STARTING GNSS");
    ECHO("*************************************************************************************************************");

    SENDAT(gnss_command, 6*standard_waiting_time, "OK");
    PAUSE(2000);
}


void obtain_first_fix()
{
    bool do_loop = true;
    int counter = 0;
    string parse_a;

    while (do_loop) {
        try {
            resp = get_a_fix();
            PAUSE(pause_find_fix);
            counter = counter + pause_find_fix;
            parse_a = resp.split(',')[3];
            if (FIND(parse_a, "A") != -1) {
                ECHO("*************************************************************************************************************");
                ECHO("FOUND FIX, taken time: " + counter);
                ECHO("*************************************************************************************************************");
                do_loop = false;
            }
        } catch {
            ECHO("*************************************************************************************************************");
            ECHO("Malformed UGRMC string received.");
            ECHO("*************************************************************************************************************");
        }
    }
}


void main()
{
    ECHO("*************************************************************************************************************");
    ECHO("REMEMBER TO CONFIGURE: the module type used for this execution.");
    ECHO("*************************************************************************************************************");
    ECHO("");
    ECHO("");
    ECHO("*************************************************************************************************************");
    ECHO("REMEMBER TO CONFIGURE: the correct APN address to be used for this execution.");
    ECHO("*************************************************************************************************************");

    script_initialization();

    handle_file_to_send();
    get_info();

    ECHO("*************************************************************************************************************");
    ECHO("TURNING OFF THE GPS");
    ECHO("*************************************************************************************************************");

    SENDAT("AT+UGPS=0", 10*standard_waiting_time, "OK");
    PAUSE(1000);

    ECHO("*************************************************************************************************************");
    ECHO("POWERING OFF");
    ECHO("*************************************************************************************************************");

    SENDAT("AT+CPWROFF", 10*standard_waiting_time,  "OK");
}
