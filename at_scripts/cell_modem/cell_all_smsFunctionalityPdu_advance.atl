/*******************************************************************************
*  Copyright (c) 2020 u-blox AG, Thalwil, Switzerland.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************
* Synopsis:     cell_all_smsFunctionalityPdu_advance.atl
* Topic:        cell_modem
* Version:      1.0
* Author:       asci
* Description:
*       This script has the purpose to test the SMS behavior in PDU mode 
*       with set character GSM 7-bit and proper connected SIM and antenna.
*       The script first reads and deletes the first message (number #0) in 
*       the list. After that, it stores a new PDU message on the module, 
*       displaies all the messages in PDU mode and sends the new PDU message. 
*       The operations is repeated a number of times equal to the parameter
*       "loop-count".
******************************************************************************
* Modules:      All Products
* Tested on:    LARA-R6, LEXI-R10 
******************************************************************************/


//----configuration settings------//

string sms_PDU_body = "039121430100038166F6000004E374F80D";  // Set the PDU message;
int lenght_sms = 13;                                         // Set the PDU's length in octets without the Service Center's address;
int loop_count = 50;                                         // Set the number of sms messages to send;

//--------------------------------//

// sms sending
void SMS_sending()
{
    // setting PDU mode
    SENDAT("AT+CMGF=0", 100, "OK");
    // set the number of bytes of the PDU message without the phone number
    string lenght_sms_cmd  ="AT+CMGW=" + lenght_sms;
    SENDAT(lenght_sms_cmd, 1000, ">");
    // reset the string
    string body = sms_PDU_body;
    body = body + 1;
    body[body.length() - 1] = 26;
    // set the body of PDU message.
    SENDAT(body, 180000, "OK");
}

// sms deleting
void SMS_reading_and_deleting()
{
    SENDAT("AT+CMGR=0", 1000, "OK");
    SENDAT("AT+CMGD=0", 1000, "OK");
}

// display all messages
void SMS_display_all_messages()
{
    SENDAT("AT+CMGL=4", 1000, "OK");
    SENDAT("AT+CMSS=0", 2000, "OK");
}

void main()
{
    ECHO("*************************************************************************************************************");
    ECHO("Add a valid PDU message in string sms_PDU_body and ");
    ECHO("a valid number in lenght_sms (PDU's length in octets without the Service Center's address)");
    ECHO("*************************************************************************************************************");
    // set character set GSM 7-bit default alphabet
    string gsm = "GSM";
    SENDAT("AT+CSCS=\"" + gsm + "\"", 1000, "OK");

    for (int i = 0; i < loop_count; i++)
    {
        if (i != 0) {
            SMS_reading_and_deleting();
        }
        SMS_sending();
        SMS_display_all_messages();
    }
}
